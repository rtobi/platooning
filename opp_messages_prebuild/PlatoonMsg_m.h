//
// Generated file, do not edit! Created by nedtool 5.6 from PlatoonMsg.msg.
//

#ifndef __PLATOONMSG_M_H
#define __PLATOONMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "artery/application/platooning/PlatooningService.h"
// }}

/**
 * Class generated from PlatoonMsg.msg by nedtool.
 * <pre>
 * packet PlatoonMsg
 * {
 *     uint32_t msgType \@enum(MessageTypePlatoon);
 *     uint32_t txStationID;
 *     uint32_t platoonID;
 *     uint32_t innerPosition;
 *     uint32_t depth;
 *     uint32_t nonce;
 *     uint32_t nonceRef;
 *     simtime_t timestamp;
 *     uint32_t ivDistance;
 *     string edgeID;
 *     string laneID;
 *     uint32_t members[];
 * }
 * </pre>
 */
class PlatoonMsg : public ::omnetpp::cPacket
{
  protected:
    uint32_t msgType;
    uint32_t txStationID;
    uint32_t platoonID;
    uint32_t innerPosition;
    uint32_t depth;
    uint32_t nonce;
    uint32_t nonceRef;
    ::omnetpp::simtime_t timestamp;
    uint32_t ivDistance;
    ::omnetpp::opp_string edgeID;
    ::omnetpp::opp_string laneID;
    uint32_t *members; // array ptr
    unsigned int members_arraysize;

  private:
    void copy(const PlatoonMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlatoonMsg&);

  public:
    PlatoonMsg(const char *name=nullptr, short kind=0);
    PlatoonMsg(const PlatoonMsg& other);
    virtual ~PlatoonMsg();
    PlatoonMsg& operator=(const PlatoonMsg& other);
    virtual PlatoonMsg *dup() const override {return new PlatoonMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getMsgType() const;
    virtual void setMsgType(uint32_t msgType);
    virtual uint32_t getTxStationID() const;
    virtual void setTxStationID(uint32_t txStationID);
    virtual uint32_t getPlatoonID() const;
    virtual void setPlatoonID(uint32_t platoonID);
    virtual uint32_t getInnerPosition() const;
    virtual void setInnerPosition(uint32_t innerPosition);
    virtual uint32_t getDepth() const;
    virtual void setDepth(uint32_t depth);
    virtual uint32_t getNonce() const;
    virtual void setNonce(uint32_t nonce);
    virtual uint32_t getNonceRef() const;
    virtual void setNonceRef(uint32_t nonceRef);
    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
    virtual uint32_t getIvDistance() const;
    virtual void setIvDistance(uint32_t ivDistance);
    virtual const char * getEdgeID() const;
    virtual void setEdgeID(const char * edgeID);
    virtual const char * getLaneID() const;
    virtual void setLaneID(const char * laneID);
    virtual void setMembersArraySize(unsigned int size);
    virtual unsigned int getMembersArraySize() const;
    virtual uint32_t getMembers(unsigned int k) const;
    virtual void setMembers(unsigned int k, uint32_t members);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PlatoonMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PlatoonMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PLATOONMSG_M_H

