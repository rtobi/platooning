//
// Generated file, do not edit! Created by nedtool 5.6 from Wrapper.msg.
//

#ifndef __WRAPPER_M_H
#define __WRAPPER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from Wrapper.msg by nedtool.
 * <pre>
 * packet WrappedCam
 * {
 *     uint8_t msg[];
 * }
 * </pre>
 */
class WrappedCam : public ::omnetpp::cPacket
{
  protected:
    uint8_t *msg; // array ptr
    unsigned int msg_arraysize;

  private:
    void copy(const WrappedCam& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WrappedCam&);

  public:
    WrappedCam(const char *name=nullptr, short kind=0);
    WrappedCam(const WrappedCam& other);
    virtual ~WrappedCam();
    WrappedCam& operator=(const WrappedCam& other);
    virtual WrappedCam *dup() const override {return new WrappedCam(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setMsgArraySize(unsigned int size);
    virtual unsigned int getMsgArraySize() const;
    virtual uint8_t getMsg(unsigned int k) const;
    virtual void setMsg(unsigned int k, uint8_t msg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WrappedCam& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WrappedCam& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>/home/tobiasrenzler/software/artery_2020_04/artery/src/artery/symbiosis/Wrapper.msg:7</tt> by nedtool.
 * <pre>
 * packet WrappedDenm
 * {
 *     uint8_t msg[];
 * }
 * </pre>
 */
class WrappedDenm : public ::omnetpp::cPacket
{
  protected:
    uint8_t *msg; // array ptr
    unsigned int msg_arraysize;

  private:
    void copy(const WrappedDenm& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WrappedDenm&);

  public:
    WrappedDenm(const char *name=nullptr, short kind=0);
    WrappedDenm(const WrappedDenm& other);
    virtual ~WrappedDenm();
    WrappedDenm& operator=(const WrappedDenm& other);
    virtual WrappedDenm *dup() const override {return new WrappedDenm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setMsgArraySize(unsigned int size);
    virtual unsigned int getMsgArraySize() const;
    virtual uint8_t getMsg(unsigned int k) const;
    virtual void setMsg(unsigned int k, uint8_t msg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WrappedDenm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WrappedDenm& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WRAPPER_M_H

